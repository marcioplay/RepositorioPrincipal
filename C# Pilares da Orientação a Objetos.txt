C# Pilares Básicos da Orientação a Objetos.
**************************

1º Abstração:
Conceitos: Pegar os conceitos do mundo real, e trazer apenas o que é relevante para dentro do software.

Identificação: ID;
Atributos;
Comportamentos;

**************************
2º Herança:
A herança, surgi para que você tenha reuso de código.

Exemplo de herança entre classes

public class Animal {
  void Respirar(){}
}

class Humano : Animal {
 // Nesse caso, Humano herda de animal.

}

Humano h = new Humano();
h.Respirar();


Abordagens:
Dica: Sempre prefira composição em vez de herança. Na composição, as opções são maiores e mais flexíveis.

ctrl + C, ctrl + V - Feri o DRY - Não repita você mesmo.
Herança:

Ex: uno é um(a) carro. Cachorro é um animal...
Composição;
Ex: organização tem um(a)empresa. Uma empresa tem mais setores...

**********************************

3º Encapsulamento

No C#, o softwrae feiro em cima de classes. 

Nivel de visibilidade

1º public - Qulauqre pessoa ou projeto pode acessar essa classe, membro, atributos e comportamentos.

2º internal - Apenas dentro do projeto

3º protected- Transmitido por herança.

4º private - Visivel apenas dentro da classe.

Dicas: O mais desafiante na OO é o encapsulamento. O que pode ou não pode ficar público. A dica seria de inicio deixar como privado, e caso ocorra a necessida de alterar a visibilidade você altera. Também cuidado em deixar tudo público, e nçao gerar dependência demais no projeto.


**********************************

4º Polimorfismo

Versões: Estáticas e Dinâmicas.
